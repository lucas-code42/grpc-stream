// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: contracts/contract.proto

package contracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	CreatePerson(ctx context.Context, opts ...grpc.CallOption) (PersonService_CreatePersonClient, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) CreatePerson(ctx context.Context, opts ...grpc.CallOption) (PersonService_CreatePersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[0], "/contracts.PersonService/CreatePerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceCreatePersonClient{stream}
	return x, nil
}

type PersonService_CreatePersonClient interface {
	Send(*PersonRequest) error
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personServiceCreatePersonClient struct {
	grpc.ClientStream
}

func (x *personServiceCreatePersonClient) Send(m *PersonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personServiceCreatePersonClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility
type PersonServiceServer interface {
	CreatePerson(PersonService_CreatePersonServer) error
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (UnimplementedPersonServiceServer) CreatePerson(PersonService_CreatePersonServer) error {
	return status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_CreatePerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).CreatePerson(&personServiceCreatePersonServer{stream})
}

type PersonService_CreatePersonServer interface {
	Send(*PersonResponse) error
	Recv() (*PersonRequest, error)
	grpc.ServerStream
}

type personServiceCreatePersonServer struct {
	grpc.ServerStream
}

func (x *personServiceCreatePersonServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personServiceCreatePersonServer) Recv() (*PersonRequest, error) {
	m := new(PersonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contracts.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreatePerson",
			Handler:       _PersonService_CreatePerson_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "contracts/contract.proto",
}
